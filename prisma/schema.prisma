// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    class          String?
    image          String?
    role           String? // New column
    hashedPassword String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    favoriteIds    String[]   @db.ObjectId
    trainingScores Score[]
    accounts       Account[]
    registers      Register[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    class             String?
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    role              String? // New column
    expires_at        Int?
    token_type        String?
    scope             String
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Score {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    tradeId       String   @db.ObjectId
    name          String?
    email         String?
    avatar        String?
    classUneti    String?
    department    String?
    courses       String?
    increasePoint Int
    decreasePoint Int
    totalScore    Int
    imageSrc      String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [tradeId], references: [id])
}

model Register {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    msv        String?
    name       String?
    email      String?
    phone      String?
    classUneti String?
    question   String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
}

model ChiDoan {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    maCD      String    @unique @map("MACD")
    tenCD     String    @map("TENCD")
    maDCS     String    @map("MADCS")
    doanCS    DoanCS    @relation(fields: [maDCS], references: [maDCS])
    doanViens DoanVien[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model DoanCS {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    maDCS     String     @unique @map("MADCS")
    tenDCS    String     @map("TENDCS")
    chiDoans  ChiDoan[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model DoanPhi {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @unique @map("MADV")
    hk1       Int      @default(0) @map("HK1")
    hk2       Int      @default(0) @map("HK2")
    hk3       Int      @default(0) @map("HK3")
    hk4       Int      @default(0) @map("HK4")
    hk5       Int      @default(0) @map("HK5")
    hk6       Int      @default(0) @map("HK6")
    hk7       Int      @default(0) @map("HK7")
    hk8       Int      @default(0) @map("HK8")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DoanVien {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    maDV         String     @unique @map("MADV")
    hoDV         String     @map("HODV")
    tenDV        String     @map("TENDV")
    maCD         String     @map("MACD")
    ngaySinh     DateTime   @map("NGAYSINH")
    gioiTinh     Int        @map("GIOITINH")
    ngayVaoDoan  DateTime   @map("NGAYVAODOAN")
    queQuan      String     @map("QUEQUAN")
    chucVu       String     @map("CHUCVU")
    chiDoan      ChiDoan    @relation(fields: [maCD], references: [maCD])
    doanPhi      DoanPhi?
    ktkls        KTKL[]
    renLuyens    RenLuyen[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model KTKL {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @map("MADV")
    ngay      DateTime @map("NGAY")
    hinhThuc  String   @map("HINHTHUC")
    ghiChu    String   @map("GHICHU")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RenLuyen {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @map("MADV")
    hocKy     Int      @map("HOCKY")
    diem      Int      @map("DIEM")
    xepLoai   String   @map("XEPLOAI")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([maDV, hocKy])
}
