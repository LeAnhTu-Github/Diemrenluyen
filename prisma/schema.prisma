// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}


model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    class          String? // Xem xét đổi tên
    className      String? // Đề xuất đổi tên từ 'class'
    image          String?
    role           String? // Sử dụng Enum Role
    hashedPassword String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    favoriteIds    String[]   @db.ObjectId // Mảng các ID của các đối tượng yêu thích (ví dụ: Listings)
    trainingScores Score[]
    accounts       Account[]
    registers      Register[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    class             String? // Xem xét đổi tên
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    role              String? // Sử dụng Enum Role
    expires_at        Int?
    token_type        String?
    scope             String? // Thường là optional
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade) // onDelete: Cascade được xử lý bởi Prisma client

    @@unique([provider, providerAccountId])
}

model Score {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    // tradeId       String   @db.ObjectId // Xem xét đổi tên thành userId nếu nó là userId
    userId        String   @db.ObjectId // Đề xuất đổi tên
    name          String? // Tên của User? Hay tên bài test?
    email         String? // Email của User?
    avatar        String? // Avatar của User?
    classUneti    String? // Lớp của User tại Uneti?
    department    String? // Khoa của User?
    courses       String? // Môn học/Khóa học liên quan đến điểm?
    increasePoint Int      @default(0)
    decreasePoint Int      @default(0)
    totalScore    Int
    imageSrc      String? // URL ảnh minh chứng? Nên là optional nếu không phải lúc nào cũng có
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [userId], references: [id]) // Liên kết với User qua userId
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  name        String?
  date        DateTime?
  link        String?
  author      String?
  host        String?
  imageUrl    String?
  address     String?
  description String?
  codeQR      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userRegister userRegister[]
}

model userRegister {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  eventId    String
  masv       String?
  name       String?
  email      String?
  class      String?
  question   String?
  isRegister Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id])
}
model Register {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    msv        String? // Mã sinh viên
    name       String?
    email      String?
    phone      String?
    classUneti String?
    question   String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
}

model ChiDoan {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    maCD      String     @unique @map("MACD") // Giữ nguyên nếu tên DB là MACD
    tenCD     String     @map("TENCD") // Giữ nguyên nếu tên DB là TENCD
    maDCS     String     @map("MADCS") // Giữ nguyên nếu tên DB là MADCS
    doanCS    DoanCS     @relation(fields: [maDCS], references: [maDCS])
    doanViens DoanVien[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model DoanCS {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    maDCS     String    @unique @map("MADCS")
    tenDCS    String    @map("TENDCS")
    chiDoans  ChiDoan[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model DoanPhi {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @unique @map("MADV")
    hk1       Int      @default(0) @map("HK1")
    hk2       Int      @default(0) @map("HK2")
    hk3       Int      @default(0) @map("HK3")
    hk4       Int      @default(0) @map("HK4")
    hk5       Int      @default(0) @map("HK5")
    hk6       Int      @default(0) @map("HK6")
    hk7       Int      @default(0) @map("HK7")
    hk8       Int      @default(0) @map("HK8")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV]) // onDelete sẽ cần xử lý ở tầng ứng dụng
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DoanVien {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    maDV        String     @unique @map("MADV")
    hoDV        String     @map("HODV")
    tenDV       String     @map("TENDV")
    maCD        String     @map("MACD") // Mã Chi Đoàn mà Đoàn viên này thuộc về
    ngaySinh    DateTime   @map("NGAYSINH")
    gioiTinh    Int        @map("GIOITINH") // 0: Nam, 1: Nữ, hoặc dùng Enum
    ngayVaoDoan DateTime   @map("NGAYVAODOAN")
    queQuan     String     @map("QUEQUAN")
    chucVu      String     @map("CHUCVU")
    chiDoan     ChiDoan    @relation(fields: [maCD], references: [maCD])
    doanPhi     DoanPhi? // Quan hệ một-một với DoanPhi
    ktkls       KTKL[] // Khen thưởng kỷ luật
    renLuyens   RenLuyen[] // Điểm rèn luyện
    evaluations Evaluation[] @relation("DoanVienToEvaluation")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model KTKL {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @map("MADV") // Mã Đoàn viên liên quan
    ngay      DateTime @map("NGAY")
    hinhThuc  String   @map("HINHTHUC")
    ghiChu    String   @map("GHICHU")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV]) // onDelete sẽ cần xử lý ở tầng ứng dụng
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RenLuyen {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    maDV      String   @map("MADV") // Mã Đoàn viên liên quan
    hocKy     Int      @map("HOCKY")
    diem      Int      @map("DIEM")
    xepLoai   String   @map("XEPLOAI")
    doanVien  DoanVien @relation(fields: [maDV], references: [maDV]) // onDelete sẽ cần xử lý ở tầng ứng dụng
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([maDV, hocKy])
}

model Evaluation {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    semester     Int?     // Nếu đánh giá theo học kỳ, có thể nullable
    strengths    String?  // Ưu điểm
    weaknesses   String?  // Khuyết điểm
    reward       String?  // Khen thưởng
    discipline   String?  // Kỷ luật
    rating       Int?     // Xếp loại/Đánh giá tổng kết (ví dụ: Hoàn thành xuất sắc nhiệm vụ)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Nếu bạn muốn liên kết với DoanVien thay vì User, hãy sửa lại như sau:
    maDV      String?
    doanVien  DoanVien? @relation("DoanVienToEvaluation", fields: [maDV], references: [maDV])

    // user      User     @relation(fields: [userId], references: [id])
}
